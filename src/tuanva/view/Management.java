/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tuanva.view;

import tuanva.daos.RegistrationInterface;
import tuanva.daos.fileDAO;
import tuanva.dtos.RegistrationDTO;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class Management extends javax.swing.JFrame {

    /**
     * Creates new form Management
     */
    String filename = "FamilyHealthCareManagement.txt";
    String servicename = "rmi://localhost:1098/RegistrationServerImpl";
    RegistrationInterface regInterface;
    DefaultTableModel model;
    fileDAO dao;
    boolean addnew = false;

    public Management() {
        initComponents();
        this.setSize(1250, 700);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Family Healthy Care Management");
        
        cbSortbyname.addItem("--Select--");
        cbSortbyname.addItem("Ascending");
        cbSortbyname.addItem("Descending");
        cbSortbyname.setEnabled(false);
        
        setnoEdit();
        
        txtRegistrationid.setEditable(true);
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbSortbyname = new javax.swing.JComboBox<>();
        btnSearchbyname = new javax.swing.JButton();
        txtSearchbyname = new javax.swing.JTextField();
        btnGetalldata = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnAddnew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        txtRegistrationid = new javax.swing.JTextField();
        btnFindbyid = new javax.swing.JButton();
        txtFullname = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtMember = new javax.swing.JTextField();
        txtChildren = new javax.swing.JTextField();
        txtAdults = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        chkMale = new javax.swing.JCheckBox();
        chkFemale = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Family Healthcare Management");
        jLabel1.setToolTipText("");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13))); // NOI18N

        jLabel2.setText("Sort by name:");

        cbSortbyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortbynameActionPerformed(evt);
            }
        });

        btnSearchbyname.setText("Search by name:");
        btnSearchbyname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchbynameActionPerformed(evt);
            }
        });

        btnGetalldata.setText("Get all data");
        btnGetalldata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetalldataActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbSortbyname, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnSearchbyname)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchbyname, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(btnGetalldata, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchbyname, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(btnSearchbyname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbSortbyname))
                .addGap(33, 33, 33)
                .addComponent(btnGetalldata, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed part:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13))); // NOI18N

        jLabel3.setText("Registration ID:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Full name:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Age:");

        jLabel6.setText("Email:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Phone:");

        jLabel8.setText("Address:");

        jLabel9.setText("Number of member:");

        jLabel10.setText("Include:");

        btnAddnew.setText("Add new");
        btnAddnew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddnewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnFindbyid.setText("Find by ID");
        btnFindbyid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindbyidActionPerformed(evt);
            }
        });

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane2.setViewportView(txtAddress);

        txtAdults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAdultsActionPerformed(evt);
            }
        });

        jLabel11.setText("Sex:");
        jLabel11.setToolTipText("");

        chkMale.setText("Male");

        chkFemale.setText("Female");

        jLabel12.setText("Children");

        jLabel13.setText("Adults");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFullname)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chkMale, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(5, 5, 5)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btnFindbyid)
                                                    .addComponent(chkFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(txtRegistrationid, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPhone)
                                    .addComponent(txtMember, javax.swing.GroupLayout.Alignment.LEADING))
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(25, 25, 25)
                        .addComponent(txtChildren, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnAddnew, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(269, 269, 269))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFindbyid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtRegistrationid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkFemale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chkMale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMember, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtChildren, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdults, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddnew, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addGroup(layout.createSequentialGroup()
                .addGap(420, 420, 420)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadData() {
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("ID");
        header.add("Full name");
        header.add("Age");
        header.add("Gender");
        header.add("Phone");
        header.add("Address");
        ArrayList<RegistrationDTO> list = fileDAO.readFile(filename);
        for (RegistrationDTO x : list) {
            Vector row = new Vector();
            row.add(x.getRegistrationID());
            row.add(x.getFullname());
            row.add(x.getAge());
            if (x.isGender()) {
                row.add("Male");
            } else {
                row.add("Female");
            }
            row.add(x.getPhone());
            row.add(x.getAddress());
            data.add(row);
            model = (DefaultTableModel) tbl.getModel();
            model.setDataVector(data, header);
        }
        cbSortbyname.setSelectedIndex(0);
        cbSortbyname.setEnabled(true);
    }
    
    
    public void setEmpty(){
        txtRegistrationid.setText("");
        txtFullname.setText("");
        txtAge.setText("");
        chkMale.setSelected(false);
        chkFemale.setSelected(false);
        txtEmail.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        txtMember.setText("");
        txtChildren.setText("");
        txtAdults.setText("");        
    }

    public void setEdit(){
        txtFullname.setEditable(true);
        txtAge.setEditable(true);
        chkMale.setEnabled(true);
        chkFemale.setEnabled(true);
        txtEmail.setEditable(true);
        txtPhone.setEditable(true);
        txtAddress.setEditable(true);
        txtMember.setEditable(true);
        txtChildren.setEditable(true);
        txtAdults.setEditable(true);            
    }
    
    public void setnoEdit(){
        txtRegistrationid.setEditable(false);
        txtFullname.setEditable(false);
        txtAge.setEditable(false);
        chkMale.setEnabled(false);
        chkFemale.setEnabled(false);
        txtEmail.setEditable(false);
        txtPhone.setEditable(false);
        txtAddress.setEditable(false);
        txtMember.setEditable(false);
        txtChildren.setEditable(false);
        txtAdults.setEditable(false);        
    }

    private void txtAdultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdultsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdultsActionPerformed

    private void btnGetalldataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetalldataActionPerformed
        // TODO add your handling code here:
        txtSearchbyname.setText("");
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if (regInterface != null) {
                loadData();
                setEmpty();
                setnoEdit();
                btnSave.setEnabled(false);
                btnRemove.setEnabled(false);
                txtRegistrationid.setEditable(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "can't connect with rmi");
        }
    }//GEN-LAST:event_btnGetalldataActionPerformed

    private void btnAddnewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddnewActionPerformed
        // TODO add your handling code here:
        txtSearchbyname.setText("");
        
        addnew = true;

        setEmpty();
        txtRegistrationid.setEditable(true);
        txtRegistrationid.requestFocus();
        setEdit();
        
        btnSave.setEnabled(true);
        btnRemove.setEnabled(false);
    }//GEN-LAST:event_btnAddnewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        ArrayList<RegistrationDTO> list = fileDAO.readFile(filename);
        boolean gender = false;
        String id = txtRegistrationid.getText();
        if(id.trim().isEmpty() || !id.matches("\\w+") || id.trim().length() > 10) {
            JOptionPane.showMessageDialog(null, "Registration ID is empty or not correct format");
            txtRegistrationid.requestFocus();
            return;
        }
        String fullname = txtFullname.getText();
        if(fullname.length() > 50){
            JOptionPane.showMessageDialog(null, "Name length must < 50 characters");
            txtFullname.requestFocus();
            return;
        }
        Integer age = 0;
        try {
            age = Integer.parseInt(txtAge.getText());
            if(age < 1){
                JOptionPane.showMessageDialog(null, "Age must be > 0");
                txtAge.requestFocus();
                return;                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Age is not correct format");
            txtAge.requestFocus();
            return;
        }
        if (chkMale.isSelected() && chkFemale.isSelected()){
            JOptionPane.showMessageDialog(null, "Please tick 1 sex");
            return;
        }
        if (chkMale.isSelected()) {
            gender = true;
        } else if (chkFemale.isSelected()) {
            gender = false;
        } else {
            JOptionPane.showMessageDialog(null, "Please tick check box sex");
            return;
        }
        String email = txtEmail.getText();
        if(email.trim().isEmpty() || email.length() > 30 || !email.matches("^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$")) {
            JOptionPane.showMessageDialog(null, "Email is empty or not correct format");
            txtEmail.requestFocus();
            return;
        }
        String phone = txtPhone.getText();
        if(phone.trim().isEmpty() || phone.length() > 15 || !phone.matches("\\b\\d+\\b")){
            JOptionPane.showMessageDialog(null, "Number phone is empty or number phone length > 15");
            txtPhone.requestFocus();
            return;
        }
        String address = txtAddress.getText();
        Integer member = 0;
        try {
            member = Integer.parseInt(txtMember.getText());
            if(member < 1){
                JOptionPane.showMessageDialog(null, "Number of member must be > 0");
                txtMember.requestFocus();
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Number of member must be a number");
            txtMember.requestFocus();
            return;
        }
        Integer children = 0;
        try {
            children = Integer.parseInt(txtChildren.getText());
            if(children < 0){
                JOptionPane.showMessageDialog(null, "Number of children must be >= 0");
                txtChildren.requestFocus();
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Number of children must be a number");
            txtChildren.requestFocus();
            return;
        }
        Integer adults = 0;
        try {
            adults = Integer.parseInt(txtAdults.getText());
            if(adults < 0) {
                JOptionPane.showMessageDialog(null, "Number of adults must be >= 0");
                txtAdults.requestFocus();
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Number of adults must be a number");
            txtAdults.requestFocus();
            return;
        }
        RegistrationDTO dto = new RegistrationDTO(id, fullname, age, gender, email, phone, address, member, children, adults);
        if (addnew) {
            for(int i = 0; i < list.size(); i++) {
                if(list.get(i).getRegistrationID().equalsIgnoreCase(id)) {
                    JOptionPane.showMessageDialog(null, "Registration ID had exists");
                    txtRegistrationid.requestFocus();
                    txtRegistrationid.setEditable(true);
                    return;
                }
            }
            try {
                regInterface = (RegistrationInterface) Naming.lookup(servicename);
                if (regInterface != null) {
                    if (regInterface.createRegistration(dto)) {
                        JOptionPane.showMessageDialog(null, "add successful");
                        loadData();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                regInterface = (RegistrationInterface) Naming.lookup(servicename);
                if (regInterface != null) {
                    int temp = JOptionPane.showConfirmDialog(null, "Do you want to update it?");
                    if(regInterface.updateRegistration(dto)) {
                        if(temp == JOptionPane.YES_OPTION){
                            JOptionPane.showMessageDialog(null, "Update successful !!");
                            loadData();
                        }                        
                    } else {
                        JOptionPane.showMessageDialog(null, "Update error !!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "can't connect with rmi");
            }
        }
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
        setEmpty();
        setnoEdit();
        txtRegistrationid.setEditable(true);
        
        addnew = false;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            int pos = tbl.getSelectedRow();
            String id = (String) tbl.getValueAt(pos, 0);
            if (regInterface != null) {
                int temp = JOptionPane.showConfirmDialog(null, "Do you want to delete it?");
                if (temp == JOptionPane.YES_OPTION) {
                    if (regInterface.removeRegistration(id)) {
                        JOptionPane.showMessageDialog(null, "Remove successful !!");
                        loadData();
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "can't connect with rmi");
        }
        setEmpty();
        setnoEdit();
        txtRegistrationid.setEditable(true);
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        
        addnew = false;
        btnSave.setEnabled(true);
        btnRemove.setEnabled(true);
        
        txtSearchbyname.setText("");
        txtRegistrationid.setEditable(false);
        setEdit();

        
        ArrayList<RegistrationDTO> dto = fileDAO.readFile(filename);
        int row = tbl.getSelectedRow();
        String id = (String) tbl.getValueAt(row, 0);
        for(int i = 0; i < dto.size(); i++){
            if(dto.get(i).getRegistrationID().equalsIgnoreCase(id)){
                txtRegistrationid.setText(dto.get(i).getRegistrationID());
                txtFullname.setText(dto.get(i).getFullname());
                txtAge.setText(String.valueOf(dto.get(i).getAge()));
                if (dto.get(i).isGender()) {
                    chkMale.setSelected(true);
                    chkFemale.setSelected(false);
                }
                if (!dto.get(i).isGender()) {
                    chkMale.setSelected(false);
                    chkFemale.setSelected(true);
                }
                txtEmail.setText(dto.get(i).getEmail());
                txtPhone.setText(dto.get(i).getPhone());
                txtAddress.setText(dto.get(i).getAddress());
                txtMember.setText(String.valueOf(dto.get(i).getNumberOfMember()));
                txtChildren.setText(String.valueOf(dto.get(i).getNumberOfChildren()));
                txtAdults.setText(String.valueOf(dto.get(i).getNumberOfAdults()));                
            }
        }
    }//GEN-LAST:event_tblMouseClicked

    private void cbSortbynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortbynameActionPerformed
        // TODO add your handling code here:
        ArrayList<RegistrationDTO> list = fileDAO.readFile(filename);
        txtSearchbyname.setText("");
        
        if(cbSortbyname.getSelectedItem().equals("Ascending")) {

            fileDAO.sortAscending(list);
                Vector header = new Vector();
                Vector data = new Vector();
                header.add("ID");
                header.add("Full name");
                header.add("Age");
                header.add("Gender");
                header.add("Phone");
                header.add("Address");
                for (RegistrationDTO x : list) {
                    Vector row = new Vector();
                    row.add(x.getRegistrationID());
                    row.add(x.getFullname());
                    row.add(x.getAge());
                    if (x.isGender()) {
                        row.add("Male");
                    } else {
                        row.add("Female");
                    }
                    row.add(x.getPhone());
                    row.add(x.getAddress());
                    data.add(row);
                    model = (DefaultTableModel) tbl.getModel();
                    model.setDataVector(data, header);
                }            
        } else if(cbSortbyname.getSelectedItem().equals("Descending")){

                fileDAO.sortDescending(list);
                Vector header = new Vector();
                Vector data = new Vector();
                header.add("ID");
                header.add("Full name");
                header.add("Age");
                header.add("Gender");
                header.add("Phone");
                header.add("Address");
                for (RegistrationDTO x : list) {
                    Vector row = new Vector();
                    row.add(x.getRegistrationID());
                    row.add(x.getFullname());
                    row.add(x.getAge());
                    if (x.isGender()) {
                        row.add("Male");
                    } else {
                        row.add("Female");
                    }
                    row.add(x.getPhone());
                    row.add(x.getAddress());
                    data.add(row);
                    model = (DefaultTableModel) tbl.getModel();
                    model.setDataVector(data, header);
                }             
        }
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
        setnoEdit();
        setEmpty();
        txtRegistrationid.setEditable(true);
    }//GEN-LAST:event_cbSortbynameActionPerformed

    private void btnSearchbynameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchbynameActionPerformed
        // TODO add your handling code here:
        setEmpty();
        int temp = 0;
        btnSave.setEnabled(false);
        btnRemove.setEnabled(false);
        setnoEdit();
        String nameSearch = txtSearchbyname.getText();
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("ID");
        header.add("Full name");
        header.add("Age");
        header.add("Gender");
        header.add("Phone");
        header.add("Address");        
        ArrayList<RegistrationDTO> list = fileDAO.readFile(filename);
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if(regInterface != null) {
                for(int i = 0; i < list.size(); i++) {
                    if(list.get(i).getFullname().equalsIgnoreCase(nameSearch)) {
                        int x = tbl.getSelectedRow();
                        Vector row = new Vector();
                        row.add(list.get(i).getRegistrationID());
                        row.add(list.get(i).getFullname());
                        row.add(list.get(i).getAge());
                        if(list.get(i).isGender()) {
                            row.add("Male");
                        } else {
                            row.add("Female");
                        }
                        row.add(list.get(i).getPhone());
                        row.add(list.get(i).getAddress());
                        data.add(row);
                        model = (DefaultTableModel) tbl.getModel();
                        model.setDataVector(data, header);                        
                        temp++;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Server is not connect");
            }
            if(temp == 0) {
                JOptionPane.showMessageDialog(null, "Full name is not exists");
                loadData();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Server is not connect");
        }
        cbSortbyname.setSelectedIndex(0);
        txtRegistrationid.setEditable(true);
    }//GEN-LAST:event_btnSearchbynameActionPerformed

    private void btnFindbyidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindbyidActionPerformed
        // TODO add your handling code here:
        addnew = false;
        ArrayList<RegistrationDTO> list = fileDAO.readFile(filename);        
        String id = txtRegistrationid.getText();
        loadData();
        txtSearchbyname.setText("");
        cbSortbyname.setSelectedIndex(0);
        
        btnSave.setEnabled(true);
        btnRemove.setEnabled(false);
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if(regInterface.findByRegistrationID(id) != null) {
                for(int i = 0; i < list.size(); i++){
                    if(list.get(i).getRegistrationID().equals(id)){
                        txtRegistrationid.setEditable(false);
                        setEdit();
                        txtRegistrationid.setText(list.get(i).getRegistrationID());
                        txtFullname.setText(list.get(i).getFullname());
                        txtAge.setText(String.valueOf(list.get(i).getAge()));
                        if(list.get(i).isGender()) {
                            chkMale.setSelected(true);
                            chkFemale.setSelected(false);
                        } else {
                            chkMale.setSelected(false);
                            chkFemale.setSelected(true);
                        }
                        txtEmail.setText(list.get(i).getEmail());
                        txtPhone.setText(list.get(i).getPhone());
                        txtAddress.setText(list.get(i).getAddress());
                        txtMember.setText(String.valueOf(list.get(i).getNumberOfMember()));
                        txtChildren.setText(String.valueOf(list.get(i).getNumberOfChildren()));
                        txtAdults.setText(String.valueOf(list.get(i).getNumberOfAdults()));;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Registration ID not exists");
                setnoEdit();
                btnSave.setEnabled(false);
                txtRegistrationid.setEditable(true);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(Management.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnFindbyidActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Management.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Management().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddnew;
    private javax.swing.JButton btnFindbyid;
    private javax.swing.JButton btnGetalldata;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchbyname;
    private javax.swing.JComboBox<String> cbSortbyname;
    private javax.swing.JCheckBox chkFemale;
    private javax.swing.JCheckBox chkMale;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtAdults;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtChildren;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullname;
    private javax.swing.JTextField txtMember;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationid;
    private javax.swing.JTextField txtSearchbyname;
    // End of variables declaration//GEN-END:variables
}
